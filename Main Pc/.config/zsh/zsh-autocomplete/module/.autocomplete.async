#!/bin/zsh
zmodload -Fa zsh/zpty b:zpty
zmodload -Fa zsh/parameter p:funcstack p:functions p:parameters
zmodload -Fa zsh/system p:sysparams
zmodload -Fa zsh/zselect b:zselect
zmodload -Fa zsh/terminfo b:echoti p:terminfo
zmodload -Fa zsh/zutil b:zparseopts
builtin autoload -Uz add-zle-hook-widget

typeset -gHi _autocomplete__buffer_start_line=1
typeset -g ZSH_AUTOSUGGEST_USE_ASYNC=yes

zle -N history-incremental-search-backward .autocomplete.async.history-incremental-search
zle -N history-incremental-search-forward .autocomplete.async.history-incremental-search

.autocomplete.async.precmd() {
  typeset -gHF _autocomplete__async_avg_duration
  zstyle -s :autocomplete: min-delay _autocomplete__async_avg_duration
  (( _autocomplete__async_avg_duration += 0.1 ))

  # Start names with `.` to avoid getting wrapped by syntax highlighting.
  zle -N .autocomplete.async.pty.zle-widget
  zle -C .autocomplete.async.pty.completion-widget list-choices \
      .autocomplete.async.pty.completion-widget
  zle -N .autocomplete.async.complete.fd-widget
  zle -C ._list_choices list-choices .autocomplete.async.list-choices.completion-widget

  if [[ -v functions[_zsh_highlight_call_widget] ]]; then
    _zsh_highlight_call_widget() {
      .autocomplete.zle-flags $WIDGET
      builtin zle "$@"
    }
  fi

  if [[ -v functions[_zsh_autosuggest_highlight_apply] ]]; then
    local action
    for action in clear modify fetch accept partial_accept execute enable disable toggle; do
      eval "_zsh_autosuggest_widget_$action() {
        .autocomplete.zle-flags \$WIDGET  # Set flags according to widget name.
        _zsh_autosuggest_$action \"\$@\"
      }"
    done
    _zsh_autosuggest_widget_suggest() {
      .autocomplete.zle-flags  # Maintain previously set flags.
      _zsh_autosuggest_suggest "$@"
    }
  fi

  add-zle-hook-widget line-init .autocomplete.async.read-cursor-position
  add-zle-hook-widget line-init .autocomplete.async.reset-context

  add-zle-hook-widget line-init .autocomplete.async.complete
  add-zle-hook-widget line-pre-redraw .autocomplete.async.complete

  add-zle-hook-widget line-finish .autocomplete.async.clear
  add-zle-hook-widget isearch-update .autocomplete.async.isearch-update
  add-zle-hook-widget isearch-exit .autocomplete.async.isearch-exit

  add-zsh-hook zshexit .autocomplete.async.stop
}

.autocomplete.async.read-cursor-position() {
  (( KEYS_QUEUED_COUNT || PENDING )) &&
      return

  [[ -v terminfo[u6] && -v terminfo[u7] ]] ||
      return 0

  # Don't run if we're in the subshell started by Midnight Commander.
  # See https://github.com/marlonrichert/zsh-autocomplete/issues/269
  [[ -v MC_SID ]] &&
      return

  emulate -L zsh; setopt $_autocomplete__options

  # Cursor position report (u6) always contains two %d markers.
  local -a CPR=( "${(s:%d:)$( echoti u6 )}" )

  # If there is a %i before the first %d, then decrement both %d values by 1.
  local -i i=${${${(M)CPR[1]%'%i'}:+1}:-0}
  CPR[1]=${CPR[1]%'%i'}

  local REPLY Y
  echoti u7 # Send cursor position request.

  # Parse the cursor position report.
  read -rsk $#CPR[1]  # Discard the preamble.
  while [[ $REPLY != $CPR[2] ]]; do
    read -rsk
    Y+=$REPLY
  done
  Y="${Y%$CPR[2]}"  # Discard the separator.

  # Flush the rest.
  while [[ $REPLY != $CPR[3] ]]; do
    read -rsk
  done

  _autocomplete__buffer_start_line=$(( Y - i ))
}

.autocomplete.async.history-incremental-search() {
  if [[ $curcontext == $WIDGET* ]]; then
    unset curcontext
  else
    typeset -gH curcontext=${WIDGET}:::
  fi
  [[ -o sharehistory ]] &&
      fc -RI  # Get new history events from file.
  .autocomplete.async.start
}

.autocomplete.async.reset-context() {
  typeset -gH curcontext=''
  zstyle -s :autocomplete: default-context curcontext
  return 0
}

.autocomplete.async.isearch-update() {
  typeset -gHi _autocomplete__isearch=1
}

.autocomplete.async.isearch-exit() {
  .autocomplete.zle-flags $LASTWIDGET
  unset _autocomplete__isearch
}

.autocomplete.async.complete() {
  .autocomplete.zle-flags $LASTWIDGET

  [[ -v MENUSELECT && ( -z $KEYS || $( bindkey "$KEYS" ) != *'" '$LASTWIDGET ) ]] &&
      return

  unset MENUSELECT

  if [[ $LASTWIDGET == .autocomplete.async.complete.fd-widget ]]; then
    zle -R
    return 0
  fi

  (( KEYS_QUEUED_COUNT || PENDING )) &&
      return

  region_highlight=()
  [[ -v functions[_zsh_highlight] ]] &&
      _zsh_highlight
  typeset -gH _autocomplete__highlight=( "$region_highlight[@]" )
  [[ -v functions[_zsh_autosuggest_highlight_apply] ]] &&
      _zsh_autosuggest_highlight_apply

  if (( REGION_ACTIVE )) ||
      [[ -v _autocomplete__isearch && $LASTWIDGET == *(incremental|isearch)* ]]; then
    zle -Rc
    return 0
  fi

  [[ $LASTWIDGET == (list-expand|_complete_help) ]] &&
      return

  [[ $_lastcomp[insert] == *unambiguous ]] &&
      zle .auto-suffix-retain  # Makes the cursor stay in the right place.

  .autocomplete.async.start
  return 0
}

.autocomplete.async.stop() {
  .autocomplete.async.close _autocomplete__async_complete_fd
  .autocomplete.async.kill _autocomplete__async_complete_pid
  return 0
}

.autocomplete.async.clear() {
  zle -Rc
  unset _autocomplete__isearch
  .autocomplete.async.stop
  .autocomplete.async.reset-context
  return 0
}

.autocomplete.async.close() {
  local fd=${(P)1}
  unset $1

  [[ $fd == <-> ]] ||
      return

  zle -F $fd 2> /dev/null
  exec {fd}<&-
}

.autocomplete.async.kill() {
  local pid=${(P)1}
  unset $1

  [[ $pid == <-> ]] ||
      return

  [[ -o monitor ]] &&
      (( pid *= -1 ))
  kill -TERM $pid 2> /dev/null
}

.autocomplete.async.start() {
  setopt $_autocomplete__options

  .autocomplete.async.stop

  typeset -gH _autocomplete__async_complete_fd=
  exec {_autocomplete__async_complete_fd}< <(
    PS4=$_autocomplete__ps4
    () {
      {
        typeset -F SECONDS=0.0
        local REPLY output
        zpty autocomplete .autocomplete.async.pty '$LBUFFER' '$RBUFFER'
        zpty -w autocomplete $'\t'
        zpty -r autocomplete output $'*\C-B'

        local -F min_delay; zstyle -s :autocomplete: min-delay min_delay ||
            min_delay=0
        local -i wait
        (( wait = 100.0 * ( min_delay - SECONDS ) ))
        (( wait > 0 )) &&
            zselect -t $wait

        (( wait = 100.0 * ( min_delay - SECONDS + ( 10.0 * _autocomplete__async_avg_duration ) ) ))
        zselect -rt $wait $REPLY &&
            zpty -r autocomplete output $'*\C-C'
      } always {
        # Always produce output, so we always reach the callback, so we can close the fd and unset
        # $_autocomplete__async_complete_fd (if necessary).
        print -rNC1 -- "$SECONDS" "$output"
        zpty -d autocomplete
      }
    } "$@" 2>>| $_autocomplete__log_file
  )
  typeset -gHi _autocomplete__async_complete_pid=$sysparams[procsubstpid]
  zle -Fw "$_autocomplete__async_complete_fd" .autocomplete.async.complete.fd-widget

  [[ -v functions[_zsh_autosuggest_highlight_apply] && -n $MENUSELECT ]] &&
      unset POSTDISPLAY

  # There's a weird bug in Zsh < 5.8, where where ^C stops working unless we force a fork.
  # See https://github.com/zsh-users/zsh-autosuggestions/issues/364
  command true
}

.autocomplete.async.pty() {
  builtin setopt promptsubst
  PS1= RPS1=
  PS4=$_autocomplete__ps4
  () {
    builtin setopt $_autocomplete__options
    builtin setopt NO_completeinword; [[ -z $curcontext ]] ||
        builtin setopt completeinword

    local hooks=( chpwd periodic precmd preexec zshaddhistory zshexit )
    builtin unset ${^hooks}_functions &> /dev/null

    $hooks[@] () {
      :
    }

    local hook; for hook in isearch-exit isearch-update line-pre-redraw line-init line-finish \
        history-line-set keymap-select; do
      builtin zle -N zle-$hook .autocomplete.async.pty.no-op
    done

    typeset -gH lbuffer=$1 rbuffer=$2

    builtin bindkey $'\t' .autocomplete.async.pty.zle-widget
    local __tmp__
    builtin vared __tmp__
  } "$@" 2>>| $_autocomplete__log_file
}

.autocomplete.async.pty.no-op() {
  :
}

.autocomplete.async.pty.zle-widget() {
  LBUFFER=$lbuffer
  RBUFFER=$rbuffer
  builtin zle .autocomplete.async.pty.completion-widget -w 2> /dev/null
}

.autocomplete.async.pty.completion-widget() {
  {
    local curcontext=${curcontext:-${WIDGET}:::}
    unset 'compstate[vared]'
    local +h -a comppostfuncs=( .autocomplete.async.pty.message )
    builtin print -n '\C-B'
    .autocomplete.async.list-choices.main-complete
    builtin print -rNC1 - "$compstate[nmatches]" "${(q+)_message_}"$'\C-C'
  } always {
    exit
  }
} 2>>| $_autocomplete__log_file

.autocomplete.async.pty.message() {
  typeset -gH _message_=$mesg
}

.autocomplete.async.complete.fd-widget() {
  local -i fd=$1
  {
    zle -F $fd # Unhook ourselves immediately, so we don't get called more than once.

    # Ensure our input will not be stopped.
    unset _autocomplete__async_complete_fd _autocomplete__async_complete_pid

    .autocomplete.zle-flags ||
        return 0

    setopt $_autocomplete__options
    local seconds nmatches message rest
    [[ -z $2 ]] &&
        IFS=$'\0' read -ru $fd seconds nmatches message rest
  } always {
    exec {fd}<&-
  }

  [[ $seconds == <->.<-> ]] ||
      return 0

  (( _autocomplete__async_avg_duration = .1 * seconds + .9 * _autocomplete__async_avg_duration ))

  # If a widget can't be called, ZLE always returns true.
  # Thus, we return false on purpose, so we can check if our widget got called.
  setopt promptsubst
  setopt NO_completeinword; [[ -z $curcontext ]] || setopt completeinword
  local +h PS4=$_autocomplete__ps4
  if ! zle ._list_choices -w "$nmatches" "${(Q)message}" 2> /dev/null; then
    region_highlight=( "$_autocomplete__highlight[@]" )
    [[ -v functions[_zsh_autosuggest_highlight_apply] ]] &&
        _zsh_autosuggest_highlight_apply

    # Refresh if and only if our widget got called. Otherwise, Zsh will crash (eventually).
    zle -R
  else
    .autocomplete.async.stop
  fi
  return 0
}

.autocomplete.async.list-choices.completion-widget() {
  () {
    local -i nmatches=$1
    local message=$2

    local min_input; zstyle -s :autocomplete: min-input min_input ||
        min_input=0
    local ignored; zstyle -s :autocomplete: ignored-input ignored

    local +h -a comppostfuncs=( .autocomplete.async.list-choices.post "$comppostfuncs[@]" )
    if [[ -n $curcontext ]]; then
      _main_complete
    elif (( $#words[@] == 1 && $#words[CURRENT] < min_input )) ||
        [[ -n $words[CURRENT] && $words[CURRENT] == $~ignored ]]; then
      zle -Rc
    elif (( nmatches == 0 )); then
      if [[ -n $message ]]; then
        local msg
        zformat -f msg "$message"
        compadd -x "$msg"
      else
        zle -Rc
      fi
    else
      local curcontext=list-choices:::
      .autocomplete.async.list-choices.main-complete
    fi
  } "$@" 2>>| $_autocomplete__log_file
  return 2
}

.autocomplete.async.list-choices.post() {
  if [[ -v _autocomplete__partial_list ]]; then
    compadd -J -last- -x '%F{black}%K{14}(MORE)%f%k'
    unset _autocomplete__partial_list
  fi
  compstate[insert]=
  unset MENUSELECT MENUMODE
}

.autocomplete.async.list-choices.main-complete() {
  local -i min_lines max_lines lines_below_buffer
  zstyle -s ":autocomplete:${curcontext}:" list-lines min_lines ||
      min_lines=16
  (( max_lines = LINES - BUFFERLINES ))
  (( lines_below_buffer = max_lines - _autocomplete__buffer_start_line ))
  local -i _async_max_lines=$(( max( min( min_lines, max_lines ), lines_below_buffer ) ))

  {
    [[ $curcontext == list-choices:* ]] &&
        () {
          emulate -L zsh; setopt $_autocomplete__options
          functions[compadd]=$functions[.autocomplete.async.compadd]
        } "$@"
    _main_complete
  } always {
    () {
      emulate -L zsh; setopt $_autocomplete__options
      [[ -v functions[compadd] ]] &&
          unfunction compadd
      [[ -v functions[comptags] ]] &&
          unfunction comptags
    }
  }
}

.autocomplete.async.compadd() {
  local -a _opts_=()
  zparseopts -E -A _opts_ - D: E: x: X:

  if [[ -v _opts_[-E] || -v _opts_[-x] ]]; then
    .autocomplete.compadd "$@"
    return
  fi

  local -a _matches_=()
  local -i header=$+_opts_[-X] footer=0
  [[ $IPREFIX$PREFIX$SUFFIX$ISUFFIX == *${compstate[unambiguous]:#?}* ]] &&
      (( footer += 1 ))
  ( ( [[ $_completer == expand ]] && _autocomplete.is_glob ) ||
          [[ $words[1] != cd &&
              -z ${${=_comp_tags}[@]:#((local-|)directories|((all|globbed)-|)files)} ]] ) &&
      (( footer += 2 ))
  local -i lines_available=$((
    max( 0, _async_max_lines - header - footer - compstate[list_lines] )
  ))
  local -i ret number_of_new_matches lines_of_new_matches

  if [[ -v _opts_[-D] ]]; then
    .autocomplete.compadd "$@"
    ret=$?

    [[ $funcstack[2] == _describe ]] ||
        return ret

    local array_name=$_opts_[-D]
    local -a _matches_=( ${(PA)array_name} )

    (( ${_matches_[(I)*:*]} > 0 )) ||
        return ret

    local -aU uniques=( ${_matches_[@]#*:} )
    number_of_new_matches=$#_matches_
    lines_of_new_matches=$#uniques[@]
    (( lines_available -= _autocomplete__reserved_lines ))
  else
    _autocomplete__reserved_lines=0
    local -i fd list_lines=0 nmatches=0
    {
      exec {fd}< <(
        {
          _opts_=()
          zparseopts -D -E -A _opts_ - A: D: O: X:
          .autocomplete.compadd -O _matches_ "$@"

          # Pre-emptively trim the matches that will definitely not fit on screen.
          local -i surplus=$(( $#_matches_ - COLUMNS * _async_max_lines / 3 ))
          (( surplus > 0 )) &&
              shift -p $surplus _matches_

          setopt localoptions listtypes
          zparseopts -D -E -A _opts_ - a
          _autocomplete.compadd_opts_len "$@"
          .autocomplete.compadd "${(@)@[1,?]}" -a - _matches_
        } always {
          print $compstate[list_lines]
          print $compstate[nmatches]
          print -rNC1 - "$_matches_[@]"
        }
      )
      IFS=$'\0' read -u $fd list_lines
      IFS=$'\0' read -u $fd nmatches
      IFS=$'\0' read -u $fd -A _matches_
    } always {
      exec {fd}<&-
    }
    _matches_=( ${_matches_[@]:#} )
    number_of_new_matches=$(( nmatches - compstate[nmatches] ))
    lines_of_new_matches=$(( list_lines - compstate[list_lines] ))
  fi

  if (( lines_of_new_matches <= lines_available )); then
    if [[ $funcstack[2] == _describe && -v _opts_[-D] ]]; then
      (( _autocomplete__reserved_lines += $lines_of_new_matches ))
      return ret
    fi
    .autocomplete.compadd "$@"
    return
  fi

  if [[ -v _opts_[-D] ]]; then
    if (( $#uniques > lines_available )); then
      typeset -gH _autocomplete__partial_list
      shift -p $(( $#uniques - max(0, lines_available - 1) )) uniques
      set -A $array_name ${(M@)${(PA)array_name}:#*:(${(~j:|:)uniques})}
    fi
    (( _autocomplete__reserved_lines += $#uniques ))
    (( ${(P@)#array_name} > 0 ))
    return
  fi

  zparseopts -D -E -A _opts_ - a d: k l U
  local -a dopt=()
  if [[ -v _opts_[-d] ]]; then
    if [[ -v _opts_[-l] ]]; then
      dopt+=( -ld )
    else
      dopt+=( -d )
    fi
    dopt+=( "$_opts_[-d]" )
  fi

  if (( lines_of_new_matches > 0 )); then
    local -F matches_per_line=$(( 1.0 * number_of_new_matches / lines_of_new_matches ))
    if (( matches_per_line < 1 )); then
      dopt[1]=-ld
      array_name=$_opts_[-d]
      if [[ -z $array_name ]]; then
        array_name=displ
        local -a displ=( "$_matches_[@]" )
        dopt[2]=displ
      fi
      set -A $array_name ${(r:COLUMNS-1:@)${(P@)array_name}//$'\n'/\n}
      matches_per_line=1
    fi
    if (( $#_matches_ > matches_per_line * lines_available )); then
      [[ -z $_autocomplete__partial_list ]] &&
          typeset -gH _autocomplete__partial_list=$curtag

      # Round this down, before subtracting.
      local -i fit=$(( matches_per_line * max(0, lines_available - 1) ))

      shift -p $(( $#_matches_ - fit )) _matches_
      (( $#_matches_ > 0 )) ||
        comptags() {
          [[ $funcstack[3] == _autocomplete.history_lines ]] ||
              return 1
          builtin comptags "$@"
        }
    fi
  fi
  _autocomplete.compadd_opts_len "$@"
  .autocomplete.compadd "${(@)@[1,?]}" $dopt -a _matches_
}
